<html >
<head >
<title >
PCI IRQ Routing Table Specification
</title>
<meta ></meta>
<meta ></meta>
<!-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->
<!-- X   PLEASE NOTE: SINGLE DATE ENTRY IS AT THE BOTTOM OF THE PAGE   X -->
<!-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->
<meta ></meta>
<meta ></meta>
<!--STYLE_START-->
<link ></link>
<link ></link>
<style  type="text/css"></style>
<style  media="screen">
#bodytext { margin-left: 20px; margin-right: 50px; font-family: Verdana, Arial, Helvetica;font-size: 9pt; line-height: 125%;}
</style>
<style  media="print">
#bodytext {display: all; margin-left: 90px; margin-right: 20px; font-family: Times; font-size: 11pt; line-height: 112%;}
</style>
<!--STYLE_END-->
<script >
<!--
function stopError() {
return true;
}
window.onerror = stopError;
  // -->
</script>
</head>
<body  bgcolor="#FFFFFF" marginheight="0" text="#000000">
<a  name="top"></a>
<!--TOOLBAR_START-->
<!-- Start: ToolBar V2.0-->
<script ></script>
<script ></script>
<script ></script>
<script ></script>
<!-- Start: ToolBar for down-level browsers-->
<div  id="TBDownLevelDiv">
<table  TABID="09392" bgcolor="#FFFFFF" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr >
<td  height="60" rowspan="2" valign="top" width="100%">
<a  href="/hwdev/">
<img ></img>
</a>
</td>
<td  align="right" height="20" valign="top">
<img ></img>
</td>
<td  align="right" bgcolor="#000000" colspan="2" height="20" nowrap="nowrap" valign="middle">
<font  arial="#DEFAULT" face="Verdana," size="1">
<b >
<a  href="/isapi/gomscom.asp?target=/products/" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
All Products
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="/isapi/gomscom.asp?target=/support/" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
Support
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="/isapi/gosearch.asp?target=/" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
Search
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="/isapi/gomscom.asp?target=/" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
microsoft.com Home
</font>
</a>
</b>
</font>
</td>
</tr>
<tr >
<td  height="40" valign="top" width="19">
<img ></img>
</td>
<td  align="right" colspan="2" height="40" nowrap="nowrap" valign="top">
<a  href="/isapi/gomscom.asp?target=/" target="_top">
<img ></img>
</a>
</td>
</tr>
<tr >
<!-- Start: Local menus -->
<td  bgcolor="#6699CC" colspan="4" height="20" nowrap="nowrap" valign="middle">
<font  arial="#DEFAULT" face="Verdana," size="1">
<b >
<a  href="/ddk/" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
Home
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="/hwdev/drvrinfo.htm" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
Technologies
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="/hwdev/desinfo.htm" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
Initiatives
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="/hwdev/desguid.htm" style="color:#FFFFFF;text-decoration:none;">
<font  color="#FFFFFF">
Design Guides
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="/hwdev/resources.htm" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  color="#FFFFFF">
Resources
</font>
</a>
<font  color="#FFFFFF">
|
</font>
<a  href="hwdev/siteinfo.htm" style="color:#FFFFFF;text-decoration:none;" target="_top">
<font  arial="#DEFAULT" face="Verdana," size="1">
About This Site
</font>
</a>
<font  color="#FFFFFF">
|
</font>
</b>
</font>
</td>
<!-- End: Local menus -->
</tr>
</table>
</div>
<!-- End: ToolBar For down-level browsers-->
<script >
<!--// Hide from old browsers
	var ToolBar_Supported = ToolBar_Supported;
	if (ToolBar_Supported != null &amp;amp;amp;amp;&amp;amp;amp;amp; ToolBar_Supported == true)
	{
		TBDownLevelDiv.style.display = "none";
		drawToolbar();
		
	//setICPSubMenuWidth("InitMenu", "absolute", 200);
	}
//-->
</script>
<!-- End: ToolBar V2.0-->
<!--TOOLBAR_END-->
<font  arial="#DEFAULT" face="Verdana," helvetica="#DEFAULT" size="1"></font>
<blockquote >
<div  id="bodytext">
<!-- XXXXXXXXXXXXXXXXX PAGE TITLE: XXXXXXXXXXXXXXXXXXXXX -->
<h3  class="main">
PCI IRQ Routing Table Specification
</h3>
<!-- XXXXXXXXXXXXXXXXX START TOC: XXXXXXXXXXXXXXXXXXXXXX -->
<dl  class="contents">
<dt  class="contents">
<br ></br>
<b >
Contents:
</b>
</dt>
<dd  class="contents">
<a  class="contents" href="#purpose">
Purpose
</a>
</dd>
<dd  class="contents">
<a  class="contents" href="#assump">
Assumptions
</a>
</dd>
<dd  class="contents">
<a  class="contents" href="#overview">
Overview
</a>
</dd>
<dd  class="contents">
<a  class="contents" href="#detection">
Detection
</a>
</dd>
<dd  class="contents">
<a  class="contents" href="#description">
Description
</a>
</dd>
<dd  class="contents">
<a  class="contents" href="#notes">
Notes
</a>
</dd>
<dt  class="contents">
<br ></br>
<b >
See Also:
</b>
</dt>
<dd  class="contents">
<a  class="contents" href="/hwdev/cardbus/Spir.htm">
<b >
Legacy PCI Interrupt Routing and CardBus in Windows 2000
</b>
</a>
</dd>
</dl>
<!-- XXXXXXXXXXXXXXX START CONTENT: XXXXXXXXXXXXXXXXXXXX -->
<p >
Microsoft Corporation, Version 1.0, February 27, 1996
</p>
<hr ></hr>
<b >
Important:
</b>
This information applies only to legacy PCs running the Microsoft® Windows® 95 OSR 2 and Windows 98 operating systems. ACPI-based systems must follow the implementation defined in the ACPI specification. For information, see the
<a  href="/hwdev/onnow.htm">
OnNow home page
</a>
.
<hr ></hr>
<h3 >
<a  name="purpose"></a>
Purpose
<br ></br>
<a  href="#top">
<img ></img>
</a>
</h3>
<p >
One drawback of Microsoft® Windows® 95 is its inability to dynamically route PCI interrupts to interrupt requests (IRQs). The BIOS must assign IRQs to all PCI devices during power-on self-test (POST), and once chosen, the interrupts cannot be moved.
</p>
<p >
In order to support assignment and reassignment of PCI IRQs, Windows 98 will need to know how the system board has wired each PCI slot's interrupt pins to the PCI Interrupt Router's interrupt pins. This information cannot be detected without special-purpose hardware, so Windows must obtain it from another source. This document describes how Windows 98 will use the BIOS to determine this information.
</p>
<h3 >
<a  name="assump"></a>
Assumptions
<br ></br>
<a  href="#top">
<img ></img>
</a>
</h3>
<p >
Each PCI system board consists of one or more slots and a PCI Interrupt Router. Each slot has four interrupt pins, known as INTA#, INTB#, INTC#, and INTD#. The PCI Interrupt Router has several interrupt pins, known as PIRQ1#, PIRQ2#, PIRQ3#, ... PIRQ
<i >
n
</i>
#. There is no PIRQ0#. The INT
<i >
n
</i>
# pins for each slot may be wire OR'd with other INT
<i >
n
</i>
# pins from the same or other slots, and these groups of pins may also be connected to a PIRQ
<i >
n
</i>
# pin on the Interrupt Router.
</p>
<p >
The actual PIRQ value assigned to each interrupt pin on each Interrupt Router is assigned by the chip-set vendor. Microsoft will work closely with chip-set vendors to assign appropriate PIRQ values for existing and future PCI chip sets.
</p>
<h3 >
<a  name="overview"></a>
Overview
<br ></br>
<a  href="#top">
<img ></img>
</a>
</h3>
<p >
The PCI IRQ routing information will be stored in a table in BIOS ROM. The table will be stored on a 16-byte boundary and will contain a signature and checksum for detection and validation purposes. The table will:
</p>
<ul >
<li >
Identify the location of the PCI Interrupt Router.
</li>
<li >
Identify a compatible PCI Interrupt Router.
</li>
<li >
Identify the IRQs devoted exclusively to PCI usage.
</li>
<li >
Show how each slot's interrupt pins are wire OR'd together into links.
</li>
<li >
Indicate which link is connected to each of the Interrupt Router's interrupt pins.
</li>
</ul>
<p >
This data is similar to the data available via the PCI BIOS 2.1 function GetIRQRoutingTable, but it contains the following additional features:
</p>
<ul >
<li >
The link numbers are standardized on a per chip set basis
</li>
<li >
The PCI Interrupt Router is identified by Bus and DevFunc
</li>
<li >
There is a field for a compatible Interrupt Router
</li>
<li >
The table is in ROM and does not rely on the BIOS for tricky 32-bit memory copying code
</li>
</ul>
<h3 >
<a  name="detection"></a>
Detection
<br ></br>
<a  href="#top">
<img ></img>
</a>
</h3>
<p >
The PCI IRQ Routing Table can be detected by searching the system memory from F0000h to FFFFFh at every 16-byte boundary for the PCI IRQ routing signature ("$PIR"). Once the signature is found, the following items need to be validated:
</p>
<ul >
<li >
Version. Must be 1.0.
</li>
<li >
Table size. Must be larger than 32 and must be a multiple of 16.
</li>
<li >
Checksum. The entire structure's checksum must be 0.
</li>
</ul>
<h3 >
<a  name="description"></a>
Description
<br ></br>
<a  href="#top">
<img ></img>
</a>
</h3>
<p >
The PCI IRQ Routing Table has the following structure:
</p>
<p ></p>
<table  TABID="09393" border="1" cellpadding="5" cellspacing="0" genuinetable="yes" tabletitle="Description 
The PCI IRQ Routing Table has the following structure:">
<tr  bgcolor="#DDDDDD">
<td  width="113">
<b >
Byte Offset
</b>
</td>
<td  width="109">
<b >
Size in Bytes
</b>
</td>
<td  width="155">
<b >
Name
</b>
</td>
</tr>
<tr >
<td  width="113">
0
</td>
<td  width="109">
4
</td>
<td  width="155">
Signature
</td>
</tr>
<tr >
<td  width="113">
4
</td>
<td  width="109">
2
</td>
<td  width="155">
Version
</td>
</tr>
<tr >
<td  width="113">
6
</td>
<td  width="109">
2
</td>
<td  width="155">
Table Size
</td>
</tr>
<tr >
<td  width="113">
8
</td>
<td  width="109">
1
</td>
<td  width="155">
PCI Interrupt Router's Bus
</td>
</tr>
<tr >
<td  width="113">
9
</td>
<td  width="109">
1
</td>
<td  width="155">
PCI Interrupt Router's DevFunc
</td>
</tr>
<tr >
<td  width="113">
10
</td>
<td  width="109">
2
</td>
<td  width="155">
PCI Exclusive IRQs
</td>
</tr>
<tr >
<td  width="113">
12
</td>
<td  width="109">
4
</td>
<td  width="155">
Compatible PCI Interrupt Router
</td>
</tr>
<tr >
<td  width="113">
16
</td>
<td  width="109">
4
</td>
<td  width="155">
Miniport Data
</td>
</tr>
<tr >
<td  width="113">
20
</td>
<td  width="109">
11
</td>
<td  width="155">
Reserved (Zero)
</td>
</tr>
<tr >
<td  width="113">
31
</td>
<td  width="109">
1
</td>
<td  width="155">
Checksum
</td>
</tr>
<tr >
<td  width="113">
32
</td>
<td  width="109">
16
</td>
<td  width="155">
First Slot Entry
</td>
</tr>
<tr >
<td  width="113">
48
</td>
<td  width="109">
16
</td>
<td  width="155">
Second Slot Entry
</td>
</tr>
<tr >
<td  width="113">
(N + 1) * 16
</td>
<td  width="109">
16
</td>
<td  width="155">
Nth Slot Entry
</td>
</tr>
</table>
<p >
<b >
Signature:
</b>
<br ></br>
The signature for this table is the ASCII string "$PIR". Byte 0 is a 24h, byte 1 a 50h, byte 2 is a 49h, and byte 3 is 52h.
</p>
<p >
<b >
Version:
</b>
<br ></br>
The version consists of a Minor version byte followed by a Major version byte. Since this specification describes the Version 1.0 table format, byte 4 of the table is a 00h and byte 5 is a 01h.
</p>
<p >
<b >
Table Size:
</b>
<br ></br>
This is a 16-bit value that holds the size of the PCI IRQ Routing Table in bytes. If there were five slot entries in the table, this value would be 32 + (5 * 16) = 112.
</p>
<p >
<b >
PCI Interrupt Router's Bus
</b>
<br ></br>
This contains the bus number of the PCI Interrupt Router device.
</p>
<p >
<b >
PCI Interrupt Router's DevFunc
</b>
<br ></br>
This contains the Device and Function number of the PCI Interrupt Router device. The Device is in the upper five bits, the Function in the lower three.
</p>
<p >
<b >
PCI Exclusive IRQs:
</b>
<br ></br>
This is an IRQ bitmap that indicates which IRQs are devoted exclusively for PCI usage. For example, if IRQ11 is devoted exclusively to PCI and cannot be assigned to an ISA device, then bit 11 of this 16-bit field should be set to 1. If there are no IRQs devoted exclusively to PCI, then this value should be 0.
</p>
<p >
<b >
Compatible PCI Interrupt Router:
</b>
<br ></br>
This field contains the Vendor ID (bytes 10 and 11) and Device ID (byes 12 and 13) of a compatible PCI Interrupt Router, or zero (0) if there is none. A compatible PCI Interrupt Router is one that uses the same method for mapping PIRQ
<i >
n
</i>
# links to IRQs, and uses the same method for controlling the edge/level triggering of IRQs. This field allows an operating system to load an existing IRQ driver on a new PCI chip set without updating any drivers and without any user interaction.
</p>
<p >
<b >
Miniport Data:
</b>
<br ></br>
This DWORD is passed directly to the IRQ Miniport's Initialize() function. If an IRQ Miniport does not need any additional information, this field should be set to zero (0).
</p>
<p >
<b >
Reserved:
</b>
<br ></br>
These bytes are reserved for future use and must be set to zero (0).
</p>
<p >
<b >
Checksum:
</b>
<br ></br>
This byte should be set such that the sum of all of the bytes in the PCI IRQ Routing Table, including the checksum, and all of the slot entries, modulo 256, is zero.
</p>
<p >
<b >
Slot Entry:
</b>
<br ></br>
Each slot entry is 16-bytes long and describes how a slot's PCI interrupt pins are wire OR'd to other slot interrupt pins and to the chip set's IRQ pins. Each entry has the following format:
</p>
<p ></p>
<table  TABID="09394" border="1" cellpadding="5" cellspacing="0" genuinetable="yes">
<tr  bgcolor="#DDDDDD">
<td  width="102">
<b >
Byte Offset
</b>
</td>
<td  width="109">
<b >
Size in Bytes
</b>
</td>
<td  width="262">
<b >
Name
</b>
</td>
</tr>
<tr >
<td  width="102">
0
</td>
<td  width="109">
Byte
</td>
<td  width="262">
PCI Bus Number
</td>
</tr>
<tr >
<td  width="102">
1
</td>
<td  width="109">
Byte
</td>
<td  width="262">
PCI Device Number (in upper five bits)
</td>
</tr>
<tr >
<td  width="102">
2
</td>
<td  width="109">
Byte
</td>
<td  width="262">
Link Value for INTA#
</td>
</tr>
<tr >
<td  width="102">
3
</td>
<td  width="109">
Word
</td>
<td  width="262">
IRQ Bitmap for INTA#
</td>
</tr>
<tr >
<td  width="102">
5
</td>
<td  width="109">
Byte
</td>
<td  width="262">
Link Value for INTB#
</td>
</tr>
<tr >
<td  width="102">
6
</td>
<td  width="109">
Word
</td>
<td  width="262">
IRQ Bitmap for INTB#
</td>
</tr>
<tr >
<td  width="102">
8
</td>
<td  width="109">
Byte
</td>
<td  width="262">
Link Value for INTC#
</td>
</tr>
<tr >
<td  width="102">
9
</td>
<td  width="109">
Word
</td>
<td  width="262">
IRQ Bitmap for INTC#
</td>
</tr>
<tr >
<td  width="102">
11
</td>
<td  width="109">
Byte
</td>
<td  width="262">
Link Value for INTD#
</td>
</tr>
<tr >
<td  width="102">
12
</td>
<td  width="109">
Word
</td>
<td  width="262">
IRQ Bitmap for INTD#
</td>
</tr>
<tr >
<td  width="102">
14
</td>
<td  width="109">
Byte
</td>
<td  width="262">
Slot Number
</td>
</tr>
<tr >
<td  width="102">
15
</td>
<td  width="109">
Byte
</td>
<td  width="262">
Reserved
</td>
</tr>
</table>
<p >
<b >
PCI Bus Number:
</b>
<br ></br>
The bus number of the slot.
</p>
<p >
<b >
PCI Device Number:
</b>
<br ></br>
The device number of the slot.
</p>
<p >
<b >
Link Value for INTn#:
</b>
<br ></br>
A value of zero means this interrupt pin is not connected to any other interrupt pins and is not connected to any of the Interrupt Router's interrupt pins.
</p>
<p >
The non-zero link values are specific to a chip set and decided by the chip-set vendor. Here is a suggested implementation:
</p>
<p >
A value of 1 through the number of interrupt pins on the Interrupt Router means the pin is connected to that PIRQ
<i >
n
</i>
# pin of the Interrupt Router.
</p>
<ul >
<li >
A value larger than the number of interrupt pins on the Interrupt Router means the pin is wire OR'd together with other slot interrupt pins, but the group is not connected to any PIRQ
<i >
n
</i>
# pin on the Interrupt Router.
</li>
<li >
Other interpretations of the link values are possible. For instance, the link value may indicate which byte of Configuration Space to access for this link, or which I/O Port to access for the link. The specific interpretation of the link value is decided by the manufacturer of the Interrupt Router and is supported by the driver for that router.
</li>
</ul>
<p >
<b >
IRQ Bitmap for INT
<i >
n
</i>
#:
</b>
<br ></br>
This value shows which of the standard AT IRQs this PCI's interrupts can be routed to. This provides the routing options for one particular PCI interrupt pin. In this bitmap, bit 0 corresponds to IRQ0, bit 1 to IRQ1, and so on. A 1 bit in this bitmap indicates that routing is possible; a 0 bit indicates that no routing is possible.
</p>
<p >
This bitmap must be the same for all pins that have the same link number.
</p>
<p >
<b >
Slot Number:
</b>
<br ></br>
This value is used to communicate whether the table entry is for a system-board device or an add-in slot. For system-board devices, the slot number should be set to zero. For add-in slots, the slot number should be set to a value that corresponds with the physical placement of the slot on the system board. This provides a way to correlate physical slots with PCI device numbers.
</p>
<p >
Values (with the exception of zero) are OEM-specific. For end-user ease-of-use, slots in the system should be clearly labeled (such as solder mask, back panel, and so on).
</p>
<p >
It should be noted that the slot entries of the PCI IRQ Routing Table are compatible with the PCI IRQ Routing Options Table of the
<i >
PCI BIOS Specification, Revision 2.1.
</i>
This makes it possible to support both the PCI IRQ Routing Table and the PCI BIOS specification with only one table in ROM.
</p>
<h3 >
<a  name="notes"></a>
Notes
<br ></br>
<a  href="#top">
<img ></img>
</a>
</h3>
<p >
Moving the Interrupt Routing Table from a PCI BIOS call into a ROM table has a couple of side effects. Since the table is in ROM, it is no longer dynamic. There are a couple of scenarios related to bridges and docking where a dynamic table is a disadvantage.
</p>
<p >
Every time a PCI device, slot, or Interrupt Router is described by location in the IRQ Routing Table, it includes the device's bus. Unfortunately, the PCI bus number of a device behind a PCI-to-PCI bridge can change without even calling the PCI BIOS. Since the IRQ Routing Table is in ROM, the table cannot be updated on the fly to reflect new bus numbers.
</p>
<p >
PCI dockable portables have the ability to add new PCI devices and slots while the system is running. Since the IRQ Routing Table is in ROM, the table cannot be updated on the fly to describe new devices.
</p>
<p >
How each of these problems gets addressed depends to a large extent on the design of the PCI bus architecture of the computer. Here are some examples:
</p>
<h4 >
Single PCI Bus Desktop System with PCI-to-PCI Bridge Add-in Card
</h4>
<p >
The routing table for a single bus desktop system with a PCI-to-PCI bridge add-in card does not need to include the IRQ routing for devices behind the add-in card. The PCI-to-PCI bridge specification already describes how to route the INT
<i >
n
</i>
# lines from the bridge's children to the bridge's INT
<i >
n
</i>
# lines. The IRQ Routing Table in the BIOS only needs to describe the routing of the bridge's INT
<i >
n
</i>
# lines to the system's PCI Interrupt Router. There is no problem supporting such systems with an IRQ Routing Table in ROM.
</p>
<h4 >
Dockable Portable Docking Through a Transparent PCI-to-PCI Bridge
</h4>
<p >
Transparent PCI-to-PCI bridges do not support primary, secondary, or subordinate bus numbers. The devices behind the bridge have the same PCI bus number as the transparent bridge itself. This architecture is commonly seen on dockable PCI portables, where the docking station devices appear behind the transparent bridge.
</p>
<p >
Since the bridge is invisible to the PCI bus hierarchy, the operating system does not have any idea how the IRQs should be routed through the bridge. In this case, the IRQ Routing Table must report the IRQ routing for all devices behind the PCI-to-PCI bridge, even when the dock is not currently present.
</p>
<p >
However, this could prove to be a problem if the portable can dock to multiple docking stations, each with different routings. Manufacturers who make such docking hardware will have to ensure that the IRQ Routing Table in ROM is the union of all known and planned docks for the portable, and that two docks do not use different routing for the same Dev.
</p>
<p >
For example, if one dock routes Dev 9 Pin A to Link 2, and another dock routes Dev 9 Pin A to Link 3, then that system cannot be supported by this specification.
</p>
<h4 >
Dockable Portable Docking Through a PCI-to-PCI Bridge to Separate PCI Bus
</h4>
<p >
Other portables support docking via a PCI-to-PCI bridge (either positive or subtractive decode) that supports the primary/secondary/subordinate bus numbers. Devices behind the PCI-to-PCI bridge have their own PCI bus number. The simplest approach to supporting these systems is to follow the PCI-to-PCI bridge specification for routing the bridge's secondary bus INT
<i >
n
</i>
# pins to the bridge's primary bus INT
<i >
n
</i>
# pins.
</p>
<p >
If a vendor implements IRQ routing through a non-standard routing mechanism, the best solution is for the PCI BIOS to configure the PCI-to-PCI bridge to the same bus number on each boot, and then to put the bus's devices and slots into the IRQ Routing Table. An application or the operating system could change the bus numbers at a later time, but at least the ROM table was accurate on bootup.
</p>
<p >
This problem is much more difficult to solve when the portable boots up undocked and then later warm or hot docks. The BIOS should not assign any bus numbers when warm or hot docking (that is the responsibility of the operating system). Yet, the BIOS has no idea what bus numbers the operating system will use when it docks, so it has no idea what bus numbers to use in the IRQ Routing Table.
</p>
<p >
IRQ routing support for such PCI systems will likely be poor or non-existent. It is strongly recommended that vendors follow the standard PCI-to-PCI bridge IRQ routing on internal or proprietary PCI-to-PCI bridges.
</p>
<h4 >
Dual PCI ("Peer") Bus System
</h4>
<p >
Some systems have two PCI buses hanging off the CPU. Since one bus is not sitting behind a PCI-to-PCI bridge, there is no standard routing mechanism for devices behind the non-zero PCI bus. Devices on both buses must appear in the IRQ Routing Table. Since the top level PCI bus numbers rarely change (and are often built directly into the hardware), it should be easy to support such systems with an IRQ Routing Table in ROM.
</p>
<p >
See also
<a  href="/hwdev/busbios/PCIIxa.HTM">
PIIXA and IRQ Routing for OSR 2
</a>
, which describes how to get PCI IRQ routing to work with the PIIXA chip set.
</p>
<!-- XXXXXXXXXXXXXXXX END CONTENT XXXXXXXXXXXXXXXXXXXXXX -->
</div>
</blockquote>
<table  TABID="09395" border="0" cellpadding="0" cellspacing="0" width="92%">
<tr >
<td  width="60">
<img ></img>
</td>
<td ></td>
</tr>
<tr >
<td ></td>
<td  valign="top">
<hr ></hr>
<font  arial="#DEFAULT" face="Verdana," helvetica="#DEFAULT" size="1">
<p >
<!-- ENTER CHANGE OF DATE -->
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
File Date: December 3, 1998
<br ></br>
<!--COPYRIGHT STATEMENT-->
<a  href="/misc/cpyright.htm" style="text-decoration:underline;">
© 1999 Microsoft Corporation. All rights reserved. Terms of Use.
</a>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<q ></q>
<br ></br>
<img ></img>
<!--COPYRIGHT STATEMENT END-->
</p>
</font>
</td>
</tr>
</table>
</body>
</html>
